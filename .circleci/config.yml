# This is derived from the config.singularity.yml recipe provided by
# continuous build. We have added the section to calculate container similarity
# metrics, and deploy the metrics back to the repository (on Github pages)
# as an image manifest.
# https://github.com/vsoch/continuous-build/tree/support/singularity/.circleci

# In addition to the variables defined above, you should set the GITHUB_EMAIL
# to be the email associated with the repo (for deploy to Github pages).
# if not set, this step won't be done

defaults: &defaults
  docker:
    - image: docker:18.01.0-ce-git
  working_directory: /tmp/src
  environment:
    - TZ: "/usr/share/zoneinfo/America/Los_Angeles"

# TODO: test if I can remove this from sections (and then just source it...)
loadenv: &loadenv
    name: Define container and Docker names
    command: |
        # If not set, define DOCKER_TAG
        if [ ! -n "${DOCKER_TAG:-}" ]; then
            DOCKER_TAG=$(echo "${CIRCLE_SHA1}" | cut -c1-10)
        fi
        # If not set, define CONTAINER_NAME
        if [ ! -n "${CONTAINER_NAME:-}" ]; then
            CONTAINER_NAME="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
        fi
        echo "Container name is ${CONTAINER_NAME}"
        # If not set, define REPO_NAME
        if [ ! -n "${REPO_NAME:-}" ]; then
            LOCAL_REPO="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            REPO_NAME=/tmp/src
            echo "Repository name (REPO_NAME) is not defined, will build ${LOCAL_REPO} in ${REPO_NAME}"
        else
            echo "Repository name found defined for build: ${REPO_NAME}"
        fi
        # export to bash environment
        echo "export CONTAINER_NAME=${CONTAINER_NAME}" >> ${BASH_ENV}
        echo "export DOCKER_TAG=${DOCKER_TAG}" >> ${BASH_ENV}
        echo "export REPO_NAME=${REPO_NAME}" >> ${BASH_ENV}
        cat ${BASH_ENV}
        source ${BASH_ENV}

dockerload: &dockerload
    name: Load Docker container Image
    no_output_timeout: 30m
    command: | 
      echo "Working directory is ${PWD}"
      docker info
      set +o pipefail
      if [ -f /tmp/cache/container.tar.gz ]; then
          apk update && apk add pigz
          pigz -d --stdout /tmp/cache/container.tar.gz | docker load
          docker images
      fi

version: 2
jobs:
  setup:
    <<: *defaults
    steps:
      - run: *loadenv
      - run:
          name: Test if the user has defined the repository name
          command: apk add --no-cache pigz python3
      - run:
          name: Prepare Github account credentials
          command: |
            if [[ -n "${GITHUB_EMAIL:-}" ]];
                echo "Preparing Github account credentials"
                # Set username and email to deploy with
                git config --global user.email $GITHUB_EMAIL
                git config --global user.name $CIRCLE_PROJECT_USERNAME
            fi

  build:
    <<: *defaults
    steps:
      - run:
          name: Install parallel gzip and python3
          command: apk add --no-cache pigz python3
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}
          paths:
            - /tmp/cache/container.tar.gz
      - restore_cache:
          key: dependency-cache-repo2docker
      - checkout
      - setup_remote_docker
      - run: *loadenv
      - run: *dockerload
      - run:
          name: Run jupyter-repo2docker to generate Docker Container
          no_output_timeout: 60m
          command: |
            echo "0. Installing dependencies..."
            python3 -m venv venv
            . venv/bin/activate
            pip install jupyter-repo2docker
            export VERSION=$(python3 -c "import repo2docker; print(repo2docker.__version__)")
            echo "repo2docker version: ${VERSION}"
            echo "1. Preparing building environment"
            echo "Working directory is ${PWD}"
            # If not set, define NOTEBOOK_PERMISSION
            if [ ! -n "${NOTEBOOK_PERMISSION:-}" ]; then
                NOTEBOOK_PERMISSION=777;
            fi
            # If not set, define NOTEBOOK_USERNAME
            if [ ! -n "${NOTEBOOK_USERNAME:-}" ]; then
                NOTEBOOK_USERNAME=joyvan;
            fi
            source ${BASH_ENV}
            echo "2. Running jupyter-repo2docker..."
            echo "jupyter-repo2docker --debug --user-name ${NOTEBOOK_USERNAME} --user-id 1000 --no-run --image-name ${CONTAINER_NAME}:${DOCKER_TAG} ${REPO_NAME}"
            jupyter-repo2docker --debug --user-name ${NOTEBOOK_USERNAME} --user-id 1000 --no-run --image-name "${CONTAINER_NAME}:${DOCKER_TAG}" "${REPO_NAME}"
            # Issue command to make /home/${NOTEBOOK_USERNAME} read/write for any user, to support Singularity
            echo "Changing permissions to chmod -R ${NOTEBOOK_PERMISSION} /home/${NOTEBOOK_USERNAME}"
            docker run --name repo2docker -td "${CONTAINER_NAME}:${DOCKER_TAG}"
            docker exec repo2docker chmod -R ${NOTEBOOK_PERMISSION} "/home/${NOTEBOOK_USERNAME}"
            docker commit repo2docker "${CONTAINER_NAME}:${DOCKER_TAG}"
            docker ps
            docker images
      - run:
          name: Docker Save
          no_output_timeout: 40m
          command: |
            source ${BASH_ENV}
            echo "Saving ${CONTAINER_NAME}:${DOCKER_TAG} to container.tar.gz"
            mkdir -p /tmp/cache
            docker save ${CONTAINER_NAME}:${DOCKER_TAG} \
              | pigz -2 -p 3 > /tmp/cache/container.tar.gz
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/container.tar.gz
            - src

  update_cache:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - save_cache:
         key: docker-v1-{{ .Branch }}
         paths:
            - /tmp/cache/container.tar.gz

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - run: *loadenv
      - run: *dockerload
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            echo "Container name set to ${CONTAINER_NAME}:${DOCKER_TAG}"
            if [[ -n "$DOCKER_PASS" ]]; then
                  docker login -u $DOCKER_USER -p $DOCKER_PASS
                  docker push ${CONTAINER_NAME}:${DOCKER_TAG}
                  echo "Tagging latest image..."
                  docker tag ${CONTAINER_NAME}:${DOCKER_TAG} ${CONTAINER_NAME}:latest
                  docker push ${CONTAINER_NAME}:latest
            fi

  manifest:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - run: *loadenv
      - run: *dockerload
      - run:
          name: Generate Inspection Manifest
          no_output_timeout: 40m
          command: |

            if [[ -n "${GITHUB_EMAIL:-}" ]];

                then
                echo "=== Deploying manifests to Github Pages ==="
                echo "Generating Container Manifest"
                echo "1. Checking out Github pages branch"
                git clone $CIRCLE_REPOSITORY_URL out
                cd out
                # either checkout github pages, or create orphan
                git checkout gh-pages || git checkout --orphan gh-pages
                git rm -rf .
                # ensure that github pages are ignored
                mkdir -p .circleci && cp -a ../.circleci/. .circleci/.
                echo "2. Generating manifest for latest..."
                docker inspect ${CONTAINER_NAME}:${DOCKER_TAG} >> manifest-latest.json
                for tag in $(curl -L -s "https://registry.hub.docker.com/v2/repositories/${CONTAINER_NAME}/tags?page_size=1024" | jq --raw-output '."results"[]["name"]')
                  do
                      # if the manifest doesn't exist, generate it
                      DOCKER_MANIFEST="manifest-${tag}.json"
                      if [ ! -f "${DOCKER_MANIFEST}" ];
                        then
                          echo "Generating manifest for ${DOCKER_MANIFEST}";
                          docker pull "${CONTAINER_NAME}:${tag}"
                          docker inspect "${CONTAINER_NAME}:${tag}" >> "${DOCKER_MANIFEST}";
                          echo "${tag}" >> tags.json;
                      fi
                done
                git add -A;
                git commit -m "Automated deployment to GitHub Pages ${CIRCLE_SHA1}" --allow-empty
                git push origin gh-pages
            else
                echo "GITHUB_EMAIL not set, skipping manifest deploy to Github pages"
            fi

workflows:
  version: 2
  build_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - update_cache:
          requires:
            - build
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      # Upload the container to Docker Hub
      - deploy:
          requires:
            - build
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      # Push the manifest back to Github pages
      - manifest:
          requires:
            - build
            - deploy
          filters:
            branches:
              ignore: /docs?\/.*/
              ignore: gh-pages
            tags:
              only: /.*/
